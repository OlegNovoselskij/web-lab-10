{"ast":null,"code":"import { ADD_TO_CART, REMOVE_FROM_CART, INCREASE_QUANTITY, DECREASE_QUANTITY } from '../Actions/Actions';\nconst initialState = {\n  items: []\n};\nconst cartReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return {\n        ...state,\n        items: [...state.items, {\n          ...action.payload,\n          quantity: 1\n        }]\n      };\n    case REMOVE_FROM_CART:\n      return {\n        ...state,\n        items: state.items.filter(item => item.cartItemId !== action.payload)\n      };\n    case INCREASE_QUANTITY:\n      return {\n        ...state,\n        items: state.items.map(item => item.cartItemId === action.payload ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item)\n      };\n    case DECREASE_QUANTITY:\n      return {\n        ...state,\n        items: state.items.map(item => item.cartItemId === action.payload ? {\n          ...item,\n          quantity: Math.max(1, item.quantity - 1)\n        } : item)\n      };\n    default:\n      return state;\n  }\n};\nexport default cartReducer;\n\n// import {\n//   ADD_TO_CART,\n//   REMOVE_FROM_CART,\n//   INCREASE_QUANTITY,\n//   DECREASE_QUANTITY,\n// } from '../Actions/Actions';\n\n// const initialState = {\n//   items: [],\n// };\n\n// const cartReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_TO_CART:\n//       const existingItem = state.items.find((item) => item.id === action.payload.id);\n//       if (existingItem) {\n//         return {\n//           ...state,\n//           items: state.items.map((item) =>\n//             item.id === action.payload.id\n//               ? { ...item, quantity: item.quantity + 1 }\n//               : item\n//           ),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           items: [...state.items, { ...action.payload, quantity: 1 }],\n//         };\n//       }\n//     case REMOVE_FROM_CART:\n//       return {\n//         ...state,\n//         items: state.items.filter((item) => item.id !== action.payload),\n//       };\n//     case INCREASE_QUANTITY:\n//       return {\n//         ...state,\n//         items: state.items.map((item) =>\n//           item.id === action.payload ? { ...item, quantity: item.quantity + 1 } : item\n//         ),\n//       };\n//     case DECREASE_QUANTITY:\n//       return {\n//         ...state,\n//         items: state.items.map((item) =>\n//           item.id === action.payload && item.quantity > 1\n//             ? { ...item, quantity: item.quantity - 1 }\n//             : item\n//         ),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default cartReducer;","map":{"version":3,"names":["ADD_TO_CART","REMOVE_FROM_CART","INCREASE_QUANTITY","DECREASE_QUANTITY","initialState","items","cartReducer","state","action","type","payload","quantity","filter","item","cartItemId","map","Math","max"],"sources":["C:/Users/WellDone/Desktop/LPNU/web/lab-8/my-app/src/components1/pages/Cart/Reducer/Reducer.js"],"sourcesContent":["import {\r\n  ADD_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  INCREASE_QUANTITY,\r\n  DECREASE_QUANTITY,\r\n} from '../Actions/Actions';\r\n\r\nconst initialState = {\r\n  items: [],\r\n};\r\n\r\nconst cartReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n      case ADD_TO_CART:\r\n          return {\r\n              ...state,\r\n              items: [...state.items, { ...action.payload, quantity: 1 }],\r\n          };\r\n      case REMOVE_FROM_CART:\r\n          return {\r\n              ...state,\r\n              items: state.items.filter((item) => item.cartItemId !== action.payload),\r\n          };\r\n      case INCREASE_QUANTITY:\r\n          return {\r\n              ...state,\r\n              items: state.items.map((item) =>\r\n                  item.cartItemId === action.payload ? { ...item, quantity: item.quantity + 1 } : item\r\n              ),\r\n          };\r\n      case DECREASE_QUANTITY:\r\n          return {\r\n              ...state,\r\n              items: state.items.map((item) =>\r\n                  item.cartItemId === action.payload\r\n                      ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n                      : item\r\n              ),\r\n          };\r\n      default:\r\n          return state;\r\n  }\r\n};\r\n\r\nexport default cartReducer;\r\n\r\n\r\n// import {\r\n//   ADD_TO_CART,\r\n//   REMOVE_FROM_CART,\r\n//   INCREASE_QUANTITY,\r\n//   DECREASE_QUANTITY,\r\n// } from '../Actions/Actions';\r\n\r\n// const initialState = {\r\n//   items: [],\r\n// };\r\n\r\n// const cartReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case ADD_TO_CART:\r\n//       const existingItem = state.items.find((item) => item.id === action.payload.id);\r\n//       if (existingItem) {\r\n//         return {\r\n//           ...state,\r\n//           items: state.items.map((item) =>\r\n//             item.id === action.payload.id\r\n//               ? { ...item, quantity: item.quantity + 1 }\r\n//               : item\r\n//           ),\r\n//         };\r\n//       } else {\r\n//         return {\r\n//           ...state,\r\n//           items: [...state.items, { ...action.payload, quantity: 1 }],\r\n//         };\r\n//       }\r\n//     case REMOVE_FROM_CART:\r\n//       return {\r\n//         ...state,\r\n//         items: state.items.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case INCREASE_QUANTITY:\r\n//       return {\r\n//         ...state,\r\n//         items: state.items.map((item) =>\r\n//           item.id === action.payload ? { ...item, quantity: item.quantity + 1 } : item\r\n//         ),\r\n//       };\r\n//     case DECREASE_QUANTITY:\r\n//       return {\r\n//         ...state,\r\n//         items: state.items.map((item) =>\r\n//           item.id === action.payload && item.quantity > 1\r\n//             ? { ...item, quantity: item.quantity - 1 }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default cartReducer;"],"mappings":"AAAA,SACEA,WAAW,EACXC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,QACZ,oBAAoB;AAE3B,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKT,WAAW;MACZ,OAAO;QACH,GAAGO,KAAK;QACRF,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAK,EAAE;UAAE,GAAGG,MAAM,CAACE,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC;MAC9D,CAAC;IACL,KAAKV,gBAAgB;MACjB,OAAO;QACH,GAAGM,KAAK;QACRF,KAAK,EAAEE,KAAK,CAACF,KAAK,CAACO,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,KAAKN,MAAM,CAACE,OAAO;MAC1E,CAAC;IACL,KAAKR,iBAAiB;MAClB,OAAO;QACH,GAAGK,KAAK;QACRF,KAAK,EAAEE,KAAK,CAACF,KAAK,CAACU,GAAG,CAAEF,IAAI,IACxBA,IAAI,CAACC,UAAU,KAAKN,MAAM,CAACE,OAAO,GAAG;UAAE,GAAGG,IAAI;UAAEF,QAAQ,EAAEE,IAAI,CAACF,QAAQ,GAAG;QAAE,CAAC,GAAGE,IACpF;MACJ,CAAC;IACL,KAAKV,iBAAiB;MAClB,OAAO;QACH,GAAGI,KAAK;QACRF,KAAK,EAAEE,KAAK,CAACF,KAAK,CAACU,GAAG,CAAEF,IAAI,IACxBA,IAAI,CAACC,UAAU,KAAKN,MAAM,CAACE,OAAO,GAC5B;UAAE,GAAGG,IAAI;UAAEF,QAAQ,EAAEK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,IAAI,CAACF,QAAQ,GAAG,CAAC;QAAE,CAAC,GACrDE,IACV;MACJ,CAAC;IACL;MACI,OAAON,KAAK;EACpB;AACF,CAAC;AAED,eAAeD,WAAW;;AAG1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}